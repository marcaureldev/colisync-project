generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PackageCategory {
  DOCUMENTS
  ELECTRONICS
  CLOTHING
  MERCHANDISES
  OTHERS
}

enum ReservationStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

type LocationInfo {
  city            String
  district        String
  preciseLocation String
}

type ContactInfo {
  fullName    String
  phoneNumber String
}

enum Role {
  USER
  RESPONSIBLE
  ADMIN
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  displayName  String
  password     String
  role         Role          
  isAdmin      Boolean       @default(false)
  isActive     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auths        Auth[]
  packages     Package[]
  reservations Reservation[]
}

model Auth {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  quantity      Int
  category      PackageCategory
  weight        Float
  sender_userId String          @db.ObjectId
  user          User            @relation(fields: [sender_userId], references: [id])
  reservationId String          @db.ObjectId
  reservation   Reservation     @relation(fields: [reservationId], references: [id])
  imageFile     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Reservation {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              User         @relation(fields: [userId], references: [id])
  departureLocation LocationInfo
  arrivalLocation   LocationInfo
  senderContact     ContactInfo
  receiverContact   ContactInfo
  additionalInfo    String?
  shippingDate      DateTime
  status            ReservationStatus
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  packages          Package[]
}
